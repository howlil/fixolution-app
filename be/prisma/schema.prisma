datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model superadmin {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  token       token[]
}

model bengkel {
  id           String    @id @default(uuid())
  nama_bengkel String
  username     String    @unique
  password     String
  no_hp        String
  alamat       String
  status       String
  gmaps_link   String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  foto         foto[]
  layanan      layanan[]
  token        token[]
  servicetogo_request servicetogo_request[]
  booking_layanan booking_layanan[]
}

model foto {
  id          String    @id @default(uuid())
  foto        String
  bengkel_id  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  bengkel     bengkel   @relation(fields: [bengkel_id], references: [id], onDelete: Cascade)
}

model user {
  id          String             @id @default(uuid())
  username    String             @unique
  password    String
  nama        String?
  no_hp       String
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  alamat_pengiriman alamat_pengiriman[]
  transaksi   transaksi[]
  keranjang   keranjang[]
  token       token[]
  servicetogo_request servicetogo_request[]
  booking_layanan booking_layanan[]
}

model keranjang {
  id          String          @id @default(uuid())
  user_id     String
  total_harga Float
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  user        user            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transaksi   transaksi[]
  keranjang_items keranjang_items[]
}

model keranjang_items {
  id             String     @id @default(uuid())
  keranjang_id   String
  sukucadang_id  String
  harga          Float
  jumlah         Int
  total_harga    Float
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  keranjang      keranjang  @relation(fields: [keranjang_id], references: [id], onDelete: Cascade)
  sukucadang     sukucadang @relation(fields: [sukucadang_id], references: [id], onDelete: Cascade)
}

model alamat_pengiriman {
  id           String   @id @default(uuid())
  user_id      String
  provinsi     String
  kota         String
  kecamatan    String
  kode_pos     String
  alamat       String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transaksi    transaksi[]
}

model layanan {
  id           String   @id @default(uuid())
  nama_layanan String
  deskripsi    String
  harga        Float
  jam_buka     String
  jam_tutup    String
  bengkel_id   String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  bengkel      bengkel  @relation(fields: [bengkel_id], references: [id], onDelete: Cascade)
  booking_layanan booking_layanan[]
}

model sukucadang {
  id          String       @id @default(uuid())
  merek_id    String
  nama        String
  deskripsi   String
  harga       Float
  stok        Int
  foto        String
  lebar       Float
  tinggi      Float
  panjang     Float
  berat       Float
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  merek       merek        @relation(fields: [merek_id], references: [id], onDelete: Cascade)
  keranjang_items keranjang_items[]
  transaksi_sukucadang transaksi_sukucadang[]
}

model merek {
  id          String   @id @default(uuid())
  nama_merek  String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  sukucadang  sukucadang[]
}

model transaksi {
  id               String   @id @default(uuid())
  user_id          String
  keranjang_id     String?
  bukti_pembayaran String?
  status           String
  alamat_id        String
  kurir            String?
  biaya_pengiriman Float?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user             user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  keranjang        keranjang? @relation(fields: [keranjang_id], references: [id], onDelete: Cascade)
  alamat_pengiriman alamat_pengiriman @relation(fields: [alamat_id], references: [id], onDelete: Cascade)
  transaksi_sukucadang transaksi_sukucadang[]
}

model transaksi_sukucadang {
  id               String     @id @default(uuid())
  transaksi_id     String
  sukucadang_id    String
  total_barang     Int
  total_harga      Float
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  transaksi        transaksi  @relation(fields: [transaksi_id], references: [id], onDelete: Cascade)
  sukucadang       sukucadang @relation(fields: [sukucadang_id], references: [id], onDelete: Cascade)
}

model token {
  id          String   @id @default(uuid())
  user_id     String?
  admin_id    String?
  bengkel_id  String?
  token       String  @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        user?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  superadmin  superadmin? @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  bengkel     bengkel?   @relation(fields: [bengkel_id], references: [id], onDelete: Cascade)
}

model servicetogo_request {
  id           String   @id @default(uuid())
  user_id      String
  bengkel_id   String
  gmaps_link   String
  deskripsi    String
  status       String
  pesan_bengkel String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bengkel      bengkel  @relation(fields: [bengkel_id], references: [id], onDelete: Cascade)
}

model booking_layanan {
  id           String   @id @default(uuid())
  user_id      String
  bengkel_id   String
  layanan_id   String
  tanggal      Int
  jam_mulai    Int
  status       String
  pesan_bengkel String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bengkel      bengkel  @relation(fields: [bengkel_id], references: [id], onDelete: Cascade)
  layanan      layanan  @relation(fields: [layanan_id], references: [id], onDelete: Cascade)
}
